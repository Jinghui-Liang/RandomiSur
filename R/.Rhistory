any(test != "y" & test != "n")
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE),
na.strings = "")
}
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(question != NA)
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question != NA))
quest <- dat[, c("question", "q_choices", "q_required")]
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question))
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE),
na.strings = "")
}
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question))
colnames(quest)[colnames(quest) == "question"] <- "prompt"
colnames(quest)[colnames(quest) == "q_choices"] <- "choices"
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE),
na.strings = "")
}
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question))
colnames(quest)[colnames(quest) == "question"] <- "prompt"
colnames(quest)[colnames(quest) == "q_choices"] <- "choices"
library (tidyverse)
glimpse (quest)
?read.csv
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = FALSE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = FALSE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question)) |> tibble::as_tibble()
colnames(quest)[colnames(quest) == "question"] <- "prompt"
colnames(quest)[colnames(quest) == "q_choices"] <- "choices"
if (any(quest$q_required != "y" & quest$q_required != "n")) {
print (quest$q_required)
stop ("Column q_required not properly defined.")
}
if (!is.na(quest$choices[1])) {
if (sum (is.na(quest$choices)) == 0) {
quest_js <- quest |>
dplyr::mutate (choices = purrr::map(quest$choices,
\(.x) unlist (strsplit(.x, split = "/"))))
} else if (sum (is.na(quest$choices)) == length (quest$choices) - 1) {
quest_js <- quest |>
dplyr::mutate (choices = strsplit(quest$choices[1], split = "/"))
} else {
stop ('Column "q_choices" not properly defined.')
}
}
scaleJSON <- jsonlite::toJSON(quest_js, pretty = TRUE)
# split out demographic part
demo <- dat[, c("demo_var", "d_question", "d_choices", "d_required")] |>
dplyr::filter(demo_var != "NA")
colnames(demo)[colnames(demo) == "d_question"] <- "prompt"
colnames(demo)[colnames(demo) == "d_choices"] <- "choices"
demo_strvar <- demo |>
dplyr::filter (is.na(demo$choices)) |>
dplyr::mutate (choices = list (NA))
demo_catvar <- demo |>
dplyr::filter (!is.na(choices)) |>
dplyr::mutate (choices = purrr::map(choices,
\(.x) unlist (strsplit(.x, split = "/"))))
demo_js <- dplyr::bind_rows(demo_strvar, demo_catvar)
demoJSON <- jsonlite::toJSON(demo_js, pretty = TRUE)
scaleJSON
demoJSON
View(quest)
View(demo_js)
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = FALSE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")] |>
dplyr::filter(!is.na(question)) |> tibble::as_tibble()
colnames(quest)[colnames(quest) == "question"] <- "prompt"
colnames(quest)[colnames(quest) == "q_choices"] <- "choices"
if (any(quest$q_required != "y" & quest$q_required != "n")) {
print (quest$q_required)
stop ("Column q_required not properly defined.")
}
if (!is.na(quest$choices[1])) {
if (sum (is.na(quest$choices)) == 0) {
quest_js <- quest |>
dplyr::mutate (choices = purrr::map(quest$choices,
\(.x) unlist (strsplit(.x, split = "/"))))
} else if (sum (is.na(quest$choices)) == length (quest$choices) - 1) {
quest_js <- quest |>
dplyr::mutate (choices = strsplit(quest$choices[1], split = "/"))
} else {
stop ('Column "q_choices" not properly defined.')
}
}
scaleJSON <- jsonlite::toJSON(quest_js, pretty = TRUE)
# split out demographic part
demo <- dat[, c("demo_var", "d_question", "d_choices", "d_required")] |>
dplyr::filter(demo_var != "NA")
colnames(demo)[colnames(demo) == "d_question"] <- "prompt"
colnames(demo)[colnames(demo) == "d_choices"] <- "choices"
demo_strvar <- demo |>
dplyr::filter (is.na(demo$choices)) |>
dplyr::mutate (choices = list (NA))
demo_catvar <- demo |>
dplyr::filter (!is.na(choices)) |>
dplyr::mutate (choices = purrr::map(choices,
\(.x) unlist (strsplit(.x, split = "/"))))
demo_js <- dplyr::bind_rows(demo_strvar, demo_catvar)
demoJSON <- jsonlite::toJSON(demo_js, pretty = TRUE)
View(dat)
View(demo_js)
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = FALSE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv (
'../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = TRUE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = TRUE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = ""
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
readRenviron(".env")
readRenviron("../.env")
con_t <- DBI::dbConnect(
RMariaDB::MariaDB(),
host = env_server,
port = Sys.getenv('SQL_PORT'),
user = Sys.getenv('USR_NAME'),
password = Sys.getenv('DB_PASS'),
dbname = Sys.getenv('SERVER_DB_NAME'))
env_server <- '127.0.0.1'
con_t <- DBI::dbConnect(
RMariaDB::MariaDB(),
host = env_server,
port = Sys.getenv('SQL_PORT'),
user = Sys.getenv('USR_NAME'),
password = Sys.getenv('DB_PASS'),
dbname = Sys.getenv('SERVER_DB_NAME'))
con_t <- DBI::dbConnect(
RMariaDB::MariaDB(),
host = env_server,
port = Sys.getenv('SQL_PORT'),
user = Sys.getenv('USR_NAME'),
password = Sys.getenv('DB_PASS'),
dbname = "fullScale")
response <- tbl (con_t, "response") |> collect()
??collect
library(tidyverse)
response <- tbl (con_t, "response") |> collect ()
View(response)
collect
demo <- tbl (con_t, "response") |> dplyr::collect ()
View(demo)
View(demo)
demo <- tbl (con_t, "demo") |> dplyr::collect ()
View(demo)
nchar(demo$property[1])
?substr
substr("abcdef", 2, 4)
demo <- tbl (con_t, "demo") |> dplyr::collect () |>
dplyr::mutate (property = substr (property, 2, nchar(property) - 1))
??pivot_longer
??pivot_wider
demo <- tbl (con_t, "demo") |> dplyr::collect () |>
dplyr::mutate (property = substr (property, 2, nchar(property) - 1)) |>
tidyr::pivot_wider(names_from = property,
values_from = value)
demo <- tbl (con_t, "demo") |> dplyr::collect () |>
dplyr::mutate (property = substr (property, 2, nchar(property) - 1))
demo <- tbl (con_t, "demo") |> dplyr::collect () |>
dplyr::mutate (property = substr (property, 2, nchar(property) - 1)) |>
tidyr::pivot_wider(names_from = property,
values_from = value)
frequency <- tbl (con_t, "frequency_counter") |> dplyr::collect ()
View(frequency)
order <- tbl (con_t, "order_list") |> dplyr::collect ()
match <- tbl (con_t, "order_match") |> dplyr::collect ()
View(match)
View(order)
View(response)
dbDisconnect(con_t)
DBI::dbDisconnect(con_t)
if (!interactive()) {
mkdir(paste0("./raw_data/results/"), Sys.Date())
} else {
mkdir(paste0("../raw_data/results/"), Sys.Date())
}
if (!interactive()) {
dir.create(paste0("./raw_data/results/"), Sys.Date())
} else {
dir.create(paste0("../raw_data/results/"), Sys.Date())
}
if (!interactive()) {
dir.create(paste0("./raw_data/results/", Sys.Date()))
} else {
dir.create(paste0("../raw_data/results/", Sys.Date()))
}
if (!interactive()) {
dir.create(paste0("./raw_data/results/", Sys.Date(), "/"))
} else {
dir.create(paste0("../raw_data/results/", Sys.Date(), "/"))
}
getwd()
if (!interactive()) {
dir.create(paste0("./raw_data/results_", Sys.Date()))
} else {
dir.create(paste0("../raw_data/results_", Sys.Date()))
}
if (interactive()) {
dat <- tibble::as_tibble (read.csv ('../scalepool/fullScale.csv',
header = TRUE,
na.strings = "",
fill = FALSE
))
} else {
dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
header = TRUE,
fill = FALSE,
na.strings = ""))
}
View(dat)
?xtable
??xtable
install.packages("xtable")
xtable::xtable(dat)
xtable::xtable(dat, caption = "Example questionnaire format")
dat <- read.csv("~/Desktop/phd-projects/s1-platform/paper/files/response_3.csv")
View(dat)
dat <- dat[, -1]
v_list <- data.frame(variables = colnames(dat))
View(v_list)
library (tidyverse)
v_list <- v_list |> mutate (description = NA)
v_list["p_id", 2] <- "The random number of subjects"
v_list <- data.frame(variables = colnames(dat))
v_list <- v_list |> mutate (description = NA)
v_list[1, 2] <- "The random number of subjects"
v_list[1, 2] <- "The random number of subjects."
v_list[2, 2] <- "Subject's RT for this item."
v_list[3, 2] <- "Subject's response for this item."
v_list[4, 2] <- "Which item it is in original questionnaire file."
v_list[4, 2] <- "Type of items in jsPsych."
v_list[4, 2] <- "Which item it is in original questionnaire file."
v_list[5, 2] <- "Which item it is in original questionnaire file."
v_list[5, 2] <- "Type of items in jsPsych."
v_list[6, 2] <- "Item position in the given presentation order."
v_list[7, 2] <- "Presentation order a given subject is receiving."
v_list[8, 2] <- "Total time since the web page is opened."
v_list[8, 2] <- "Node marks in jsPcysh timeline."
v_list[8, 2] <- "Total time since the web page is opened."
v_list[9, 2] <- "Node marks in jsPcysh timeline."
xtable::xtable(v_list, caption = "Variable included in main data")
?xtable::xtable
library (tidyverse)
set.seed (666) ## since it would be sourced by other scripts it should be reproducible.
## Method to generate a Latin-Square
latin_template <- function(n){
lat_sq <- array (rep (seq_len (n), each = n), c (n, n))
lat_sq <- apply (lat_sq - 1, 2, function (x) (x + 0:(n-1))
%% n) + 1
return(lat_sq)
}
## Generate a table including all the presentation order we want, and make it suitable for JavaScript.
p_order_table <- function (qlen, rd.size = qlen) {
if (isTRUE (rd.size >= factorial(qlen))) {
stop ("number of expected randomzied order exceeded the maximum possible arrangments")
} else {
fx <- as_tibble (t ((1 : qlen)))
ls <- as_tibble (latin_template (qlen))
rd <- as_tibble (t (replicate (rd.size, sample (1: qlen, qlen, FALSE), TRUE)))
ls_label <- paste0 (rep ("ls", length (ls)), 1:length (ls))
rd_label <- paste0 (rep ("rd", rd.size), 1: rd.size)
order_label <- c ("fx", ls_label, rd_label)
position_label <- paste0 ("p", 1: qlen)
dat <- (bind_rows (fx, ls) %>% bind_rows (rd) - 1)
order_table <- tibble (order_label = order_label) %>% bind_cols (dat)
colnames (order_table) [2: (qlen + 1)] <- position_label
return (order_table)
}
}
o.record <- p_order_table (5)
View(o.record)
?sample
sample (1:5, 5, replace = TRUE)
sample (1:5, 5, replace = FALSE)
new_order <- data.frame(
order_label = paste0("newrd", 1:5)
p1 = NA,
source("~/.active-rstudio-document", echo=TRUE)
View(new_order)
new_order[2:5, ] <- sample (1:5, 5, replace = FALSE)
new_order[1:5, ] <- sample (1:5, 5, replace = FALSE)
new_order[1:5, ] <- t(sample (1:5, 5, replace = FALSE))
new_order[1:5, -1] <- t(sample (1:5, 5, replace = FALSE))
new_order <- data.frame(
order_label = paste0("newrd", 1:5),
p1 = NA,
p2 = NA,
p3 = NA,
p4 = NA,
p5 = NA
)
if (file.exists ("/.dockerenv")) {
questPath <- paste0("/var/scalepool/", quest_name)
outputDir <- "/var/www/html/"
} else {
if (interactive()) {
## questPath <- "../scalepool/fullscale.csv"
questPath <- "../inject-order/fullscale.csv"
} else {
questPath <- paste0("./scalepool/", quest_name)
}
outputDir <- "./server/www/"
}
cat(questPath)
dat <- readr::read_csv(questPath) |>
dplyr::mutate(choices = ifelse(choices == "NA", NA_real, choices),
required = ifelse(required == "NA", NA_real, required))
if (file.exists ("/.dockerenv")) {
questPath <- paste0("/var/scalepool/", quest_name)
outputDir <- "/var/www/html/"
} else {
if (interactive()) {
questPath <- "../scalepool/fullscale.csv"
# questPath <- "../inject-order/fullscale.csv"
} else {
questPath <- paste0("./scalepool/", quest_name)
}
outputDir <- "./server/www/"
}
cat(questPath)
dat <- readr::read_csv(questPath) |>
dplyr::mutate(choices = ifelse(choices == "NA", NA_real, choices),
required = ifelse(required == "NA", NA_real, required))
dat <- readr::read_csv(questPath)
View(dat)
try ({
con_t <- DBI::dbConnect(
RMariaDB::MariaDB(),
host = env_server,
port = Sys.getenv('SQL_PORT'),
user = Sys.getenv('USR_NAME'),
password = Sys.getenv('DB_PASS'),
dbname = localdb)
},
error = stop (".env file not correctly configured.")
)
RMariaDB::MariaDB()
if(!interactive()) {
prompt_position <- "Are you running local test or uploading your platform to a server? (local/server)"
cat (prompt_position)
position <- readLines("stdin", n = 1)
## ------ under development ------
prompt_questionnaire <- "Which database you would like to down data from?"
## ------
prompt_verbose <- "Do you want to download (f)ull data or just (r)esposne data? (f/r)"
cat (prompt_verbose)
verbose <- readLines("stdin", n = 1)
readRenviron("./.env")
} else {
localdb <- "fullScale"
readRenviron("../.env")
}
if (position == "local") {
env_server <- '127.0.0.1'
} else if (position == "server") {
env_server <- Sys.getenv ('SERVER_NAME')
} else {
stop ('arguments must be either "local" or "server"')
}
