#     alter <- 0
#   }
#   for (a in 1:length (tmp) -4) {
#     if (isTRUE(tmp[a] == tmp[a+2]) &&
#         isTRUE(tmp[a+1] == tmp[a+3])) {
#       alter <- alter + 1
#       a <- a + 4
#     }
#   }
#   alt_run[g] <- alter
# }
# return (alt_run)
# }
alter_tibble <- tibble (subj_id = unique (dat$subj_id),
alt_run = alternative_check(only_response))
alternative_check <- function (dat) {
alt_run <- array()
for (g in 1:nrow (dat)) {
tmp <- as.array (t (dat[g, ]))
alter <- 0
ind <- 1
while ((isTRUE(tmp[ind] == tmp[ind+2]) &&
isTRUE(tmp[ind+1] == tmp[ind+3]))) {
alter <- alter + 1
ind <- ind + 4
if (ind == length (tmp) - 4)
{
break
} else {
ind <- ind + 1
}
}
}
}
# alternative_check <- function (dat) {
#   alt_run <- array()
#   for (g in 1:nrow (dat)) {
#     tmp <- as.array (t (dat[g, ]))
#     alter <- 0
#   }
#   for (a in 1:length (tmp) -4) {
#     if (isTRUE(tmp[a] == tmp[a+2]) &&
#         isTRUE(tmp[a+1] == tmp[a+3])) {
#       alter <- alter + 1
#       a <- a + 4
#     }
#   }
#   alt_run[g] <- alter
# }
# return (alt_run)
# }
alter_tibble <- tibble (subj_id = unique (dat$subj_id),
alt_run = alternative_check(only_response))
alt_outlier <- filter (alter_tibble, alt_run <= quantile (alt_run, prob = 0.1) |
alt_run >= quantile (alt_run, prob = 0.9))$subj_id
View(alter_tibble)
alternative_check <- function (dat) {
alt_run <- array()
for (g in 1:nrow (dat)) {
tmp <- as.array (t (dat[g, ]))
alter <- 0
ind <- 1
while ((isTRUE(tmp[ind] == tmp[ind+2]) &&
isTRUE(tmp[ind+1] == tmp[ind+3]))) {
alter <- alter + 1
ind <- ind + 4
if (ind == length (tmp) - 4)
{
break
} else {
ind <- ind + 1
}
}
}
return (alt_run)
}
# alternative_check <- function (dat) {
#   alt_run <- array()
#   for (g in 1:nrow (dat)) {
#     tmp <- as.array (t (dat[g, ]))
#     alter <- 0
#   }
#   for (a in 1:length (tmp) -4) {
#     if (isTRUE(tmp[a] == tmp[a+2]) &&
#         isTRUE(tmp[a+1] == tmp[a+3])) {
#       alter <- alter + 1
#       a <- a + 4
#     }
#   }
#   alt_run[g] <- alter
# }
# return (alt_run)
# }
alter_tibble <- tibble (subj_id = unique (dat$subj_id),
alt_run = alternative_check(only_response))
alt_outlier <- filter (alter_tibble, alt_run <= quantile (alt_run, prob = 0.1) |
alt_run >= quantile (alt_run, prob = 0.9))$subj_id
View(alter_tibble)
alternative_check <- function (dat) {
alt_run <- array()
for (g in 1:nrow (dat)) {
tmp <- as.array (t (dat[g, ]))
alter <- 0
ind <- 1
while ((isTRUE(tmp[ind] == tmp[ind+2]) &&
isTRUE(tmp[ind+1] == tmp[ind+3]))) {
alter <- alter + 1
ind <- ind + 4
if (ind == length (tmp) - 4)
{
break
} else {
ind <- ind + 1
}
}
alt_run[g] <- alter
}
return (alt_run)
}
# alternative_check <- function (dat) {
#   alt_run <- array()
#   for (g in 1:nrow (dat)) {
#     tmp <- as.array (t (dat[g, ]))
#     alter <- 0
#   }
#   for (a in 1:length (tmp) -4) {
#     if (isTRUE(tmp[a] == tmp[a+2]) &&
#         isTRUE(tmp[a+1] == tmp[a+3])) {
#       alter <- alter + 1
#       a <- a + 4
#     }
#   }
#   alt_run[g] <- alter
# }
# return (alt_run)
# }
alter_tibble <- tibble (subj_id = unique (dat$subj_id),
alt_run = alternative_check(only_response))
alt_outlier <- filter (alter_tibble, alt_run <= quantile (alt_run, prob = 0.1) |
alt_run >= quantile (alt_run, prob = 0.9))$subj_id
dat_t3 <- filter (dat_t2, !subj_id %in% alt_outlier)
View(alter_tibble)
## Participants excluded based on criterion 3
for (k in 1:length(unique(dat_t2$subj_id))) {
tmp <- subset(dat_t1, subj_id == unique(dat_t2$subj_id)[k])
if (unique(tmp$subj_id) %in% alt_outlier) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c3/',
subset (rt_all,
subj_id == unique (tmp$subj_id))$rt / 60000,
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
View(alter_tibble)
quantile (alt_run, prob = 0.1)
quantile (alter_tibble$alt_run, prob = 0.1)
quantile (alter_tibble$alt_run, prob = 0.9)
alt_outlier <- filter (alter_tibble, alt_run > 0)$subj_id
## Participants excluded based on criterion 3
for (k in 1:length(unique(dat_t2$subj_id))) {
tmp <- subset(dat_t1, subj_id == unique(dat_t2$subj_id)[k])
if (unique(tmp$subj_id) %in% alt_outlier) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c3/',
subset (rt_all,
subj_id == unique (tmp$subj_id))$rt / 60000,
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
options (tidyverse.quiet = TRUE)
library (tidyverse)
library (mgcv)
library (itsadug)
source("./toolbox.R") ## toolbox is a script I created to store all customized functions for psychometric analysis.
orig_dat <- read.csv("./response-0729.csv")
dat <- dplyr::select (orig_dat ,-c ("time_elapsed", "internal_node_id")) %>%
subset (trial_type == '"survey-likert"') %>%
dplyr::select (-"trial_type") %>%
## remove unnecessary quotes in dataset.
mutate(p_id = substr (.$p_id, 2, 5),
response = as.integer (substr(.$response, 8, 8)) + 1, ## turning 0 - 4 scale into 1 - 5 standard Likert scale.
q_num = as.integer(substr (.$Q_num, 2, 3)),
t_num = as.integer(.$trial_index) -3,
subj_id = rep(1:length(unique(.$p_id)), each = 50),
order_index = substr (.$order_index, 2, 3)) %>%
dplyr::select(-"Q_num", -"trial_index")
dat <- dat[, c(7, 1, 5, 6, 2, 3, 4)]
dat_wide <- dat %>%
mutate (t_num = paste0 ("t", .$t_num)) %>%
pivot_wider (.,
id_cols = c (subj_id, order_index),
names_from = t_num,
values_from = response)
only_response <- dat_wide[, -c (1, 2)]
runs <- lapply (1:length (as.tibble (t (only_response))),
function (.x) {rle (only_response[.x, ])}) %>%
sapply (., `[[`, 'lengths')
names(runs) <- dat_wide$subj_id
run_sum <- tibble (subj_id = dat_wide$subj_id,
runs = map_int(1:length(runs), function(.x) {length (runs[[.x]])}
))
dat <- dat %>%
mutate (runs = rep (run_sum$runs, each = 50))
runs_outliers <- subset (run_sum, runs <= quantile (runs, prob = 0.05) | runs >= quantile (runs, prob = 0.95))$subj_id
dat_t1 <- dat %>% filter (., !subj_id %in% runs_outliers) ## remove top and bottom 5% of runs
## an array records participants with casual answers
casual_ans <- function (dat) {
un_subj_id <- array()
N <- 1
for (j in 1:length (unique(dat$subj_id))) {
tmp <- subset (dat, subj_id == unique(dat$subj_id)[j])
if (length (unique (tmp$response)) <= 3) {
un_subj_id[N] <- unique(dat_t1$subj_id)[j]
N <- N + 1
}
}
return (un_subj_id)
}
## dat_t means tidy data
repeated_ans <- casual_ans(dat_t1)
dat_t2 <- subset (dat_t1, !subj_id %in% repeated_ans)
alternative_check <- function (dat) {
alt_run <- array()
for (g in 1:nrow (dat)) {
tmp <- as.array (t (dat[g, ]))
alter <- 0
ind <- 1
while ((isTRUE(tmp[ind] == tmp[ind+2]) &&
isTRUE(tmp[ind+1] == tmp[ind+3]))) {
alter <- alter + 1
ind <- ind + 4
if (ind == length (tmp) - 4)
{
break
} else {
ind <- ind + 1
}
}
alt_run[g] <- alter
}
return (alt_run)
}
# alternative_check <- function (dat) {
#   alt_run <- array()
#   for (g in 1:nrow (dat)) {
#     tmp <- as.array (t (dat[g, ]))
#     alter <- 0
#   }
#   for (a in 1:length (tmp) -4) {
#     if (isTRUE(tmp[a] == tmp[a+2]) &&
#         isTRUE(tmp[a+1] == tmp[a+3])) {
#       alter <- alter + 1
#       a <- a + 4
#     }
#   }
#   alt_run[g] <- alter
# }
# return (alt_run)
# }
alter_tibble <- tibble (subj_id = unique (dat$subj_id),
alt_run = alternative_check(only_response))
# alt_outlier <- filter (alter_tibble, alt_run <= quantile (alt_run, prob = 0.1) |
#                                     alt_run >= quantile (alt_run, prob = 0.9))$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 0)$subj_id
dat_t3 <- filter (dat_t2, !subj_id %in% alt_outlier)
rt_all <- dat_t3 %>% group_by (subj_id) %>%
summarise (n = n (),
rt = sum (rt))
rt_outlier <- dat_t3 %>%
filter (., subj_id %in% subset (rt_all,
rt <= quantile (rt, prob = 0.05) |
rt >= quantile (rt, prob = 0.95))$subj_id)
dat_t4 <- dat_t3 %>% filter (., !subj_id %in% rt_outlier$subj_id) ## remove top and bottom 5% of reaction time
length (unique (dat_t4$subj_id))
## Participants excluded based on criterion 1
for (i in 1:length(unique(dat$subj_id))) {
tmp <- subset(dat, subj_id == unique(dat$subj_id)[i])
if (unique(tmp$subj_id) %in% runs_outliers) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id), unique(tmp$runs)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c1/', length (unique(tmp$response)),
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
## Participants excluded based on criterion 2
for (i in 1:length(unique(dat_t1$subj_id))) {
tmp <- subset(dat, subj_id == unique(dat_t1$subj_id)[i])
if (unique(tmp$subj_id) %in% repeated_ans) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id), unique(tmp$runs)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c2/', length (unique(tmp$response)),
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
## Participants excluded based on criterion 3
for (k in 1:length(unique(dat_t2$subj_id))) {
tmp <- subset(dat_t1, subj_id == unique(dat_t2$subj_id)[k])
if (unique(tmp$subj_id) %in% alt_outlier) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c3/',
subset (rt_all,
subj_id == unique (tmp$subj_id))$rt / 60000,
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
## Participants excluded based on criterion 4
for (k in 1:length(unique(dat_t3$subj_id))) {
tmp <- subset(dat_t3, subj_id == unique(dat_t3$subj_id)[k])
if (unique(tmp$subj_id) %in% rt_outlier$subj_id) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c4/',
subset (rt_all,
subj_id == unique (tmp$subj_id))$rt / 60000,
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
for (i in 1:length(unique(dat_t4$subj_id))) {
tmp <- subset(dat_t4, subj_id == unique(dat_t4$subj_id)[i])
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id), unique(tmp$runs)))
ggsave(filename = paste0('./outlier\ analysis/final/', unique(tmp$subj_id), ".png"), plot = last_plot(), width = 9, height = 6)
}
remove (tmp)
View(alter_tibble)
alt_outlier <- filter (alter_tibble, alt_run > 1)$subj_id
dat_t3 <- filter (dat_t2, !subj_id %in% alt_outlier)
rt_all <- dat_t3 %>% group_by (subj_id) %>%
summarise (n = n (),
rt = sum (rt))
rt_outlier <- dat_t3 %>%
filter (., subj_id %in% subset (rt_all,
rt <= quantile (rt, prob = 0.05) |
rt >= quantile (rt, prob = 0.95))$subj_id)
dat_t4 <- dat_t3 %>% filter (., !subj_id %in% rt_outlier$subj_id) ## remove top and bottom 5% of reaction time
length (unique (dat_t4$subj_id))
## Participants excluded based on criterion 3
for (k in 1:length(unique(dat_t2$subj_id))) {
tmp <- subset(dat_t1, subj_id == unique(dat_t2$subj_id)[k])
if (unique(tmp$subj_id) %in% alt_outlier) {
tmp_plot <-
ggplot (tmp, aes (t_num, response)) +
geom_point () +
geom_line(color = 'red') +
scale_x_continuous(breaks = 1:50) +
scale_y_continuous(breaks = 1:5, limits = c (1, 5)) +
labs (x = 't_num',
title = paste (unique(tmp$subj_id)))
ggsave(filename = paste0('./outlier\ analysis/outlier_c3/',
subset (rt_all,
subj_id == unique (tmp$subj_id))$rt / 60000,
'_',
unique(tmp$subj_id),
".png"),
plot = last_plot(), width = 9, height = 6)
}
}
?unique
alt_outlier <- filter (alter_tibble, alt_run > 2)$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 0)$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 1)$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 2)$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 3)$subj_id
alt_outlier <- filter (alter_tibble, alt_run > 2)$subj_id
View(rt_outlier)
repeated_ans <- casual_ans(dat_t1)
## re means 'removed participant'
exec_p <- select (dat, c (subj_id, p_id, order_index)) %>%
filter (.,
subj_id %in% repeated_ans |
subj_id %in% runs_outliers |
subj_id %in% alt_outlier |
subj_id %in% rt_outlier$subj_id) %>%
select (-subj_id) %>%
distinct()
re_tibble <- orig_dat %>%
subset (trial_type == '"survey-likert"') %>%
mutate (p_id = substr (.$p_id, 2, 5)) %>%
subset (., p_id %in% exec_p$p_id) %>%
select (p_id, order_index) %>%
distinct() %>%
group_by (order_index) %>%
summarise (n = n())
View(re_tibble)
getwd()
devtools::load_all("autocorr")
devtools::load_all("rmseq")
?pkgbuild::clean_dll
setwd ("/ssh:tl:/mnt/nfs/dale-lab/expt/rand-nom-logit/")
?merge
?update
devtools::load_all("autocorr")
library (tidyverse)
test <- tibble (time = rep (c ("6h", "12h", "18h", "24h"), each = 4))
View(test)
?rnorm
test <- tibble (time = rep (c ("6h", "12h", "18h", "24h"), each = 4),
factor1 = round (rnorm (16, 0, 1), 2),
factor2 = round (rnorm (16, 0, 1), 2),
factor3 = round (rnorm (16, 0, 1), 2),
factor4 = round (rnorm (16, 0, 1), 2),
factor5 = round (rnorm (16, 0, 1), 2))
View(test)
?anova
?aov
test <- tibble (time = c ("6h", "12h", "18h", "24h"),
f1t1 = round (rnorm (4, 0, 1), 2),
f1t2 = round (rnorm (4, 0, 1), 2),
f1t3 = round (rnorm (4, 0, 1), 2),
f1t4 = round (rnorm (4, 0, 1), 2),
f1t5 = round (rnorm (4, 0, 1), 2),
f2t1 = round (rnorm (4, 0, 1), 2),
f2t2 = round (rnorm (4, 0, 1), 2),
f2t3 = round (rnorm (4, 0, 1), 2),
f2t4 = round (rnorm (4, 0, 1), 2),
f2t5 = round (rnorm (4, 0, 1), 2),
f3t1 = round (rnorm (4, 0, 1), 2),
f3t2 = round (rnorm (4, 0, 1), 2),
f3t3 = round (rnorm (4, 0, 1), 2),
f3t4 = round (rnorm (4, 0, 1), 2),
f3t5 = round (rnorm (4, 0, 1), 2),
)
View(test)
write.csv(test, "./Desktop/testtibble.csv")
test <- tibble (time = c ("f1", "f2", "f3"),
f1t1 = round (rnorm (4, 0, 1), 2),
f1t2 = round (rnorm (4, 0, 1), 2),
f1t3 = round (rnorm (4, 0, 1), 2),
f1t4 = round (rnorm (4, 0, 1), 2),
f1t5 = round (rnorm (4, 0, 1), 2),
f2t1 = round (rnorm (4, 0, 1), 2),
f2t2 = round (rnorm (4, 0, 1), 2),
f2t3 = round (rnorm (4, 0, 1), 2),
f2t4 = round (rnorm (4, 0, 1), 2),
f2t5 = round (rnorm (4, 0, 1), 2),
f3t1 = round (rnorm (4, 0, 1), 2),
f3t2 = round (rnorm (4, 0, 1), 2),
f3t3 = round (rnorm (4, 0, 1), 2),
f3t4 = round (rnorm (4, 0, 1), 2),
f3t5 = round (rnorm (4, 0, 1), 2),
)
?t.test
setwd("./Desktop/rt_survey_demo/")
readRenviron(".env")
user <- Sys.getenv("USER")
typeof (con)
q()
install.packages("RMariaDB")
q()
