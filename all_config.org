* All configuration

Below is the whole setup about this platform. You might found descriptions in /Create table for recording presentation order in R/ and /test-survey.js/ most useful if you want to change presentation orders or collect more details.

** .env file
#+begin_src text :tangle .env :mkdirp yes
HTTP_PORT=8080
SQL_PORT=3306
USR_NAME=root
SERVER_DB_NAME=test
DB_PASS=example
MARIADB_VER=10.4
COMPOSE_PROJECT=platform
#+end_src

** Setting up the server

Since we have =.env= file, docker-compose will read the environment variables automatically.

*** Dockerfile

#+begin_src text :tangle server.Dockerfile
FROM php:8.1.1-apache
RUN docker-php-ext-install mysqli pdo pdo_mysql
#+end_src

*** Docker-compose

#+begin_src yaml :tangle docker-compose.yml
version: '3.1'

services:
  php:
    build:
      context: .
      dockerfile: server.Dockerfile
    ports:
      - ${HTTP_PORT}:80
    restart: always
    volumes:
      - ./server/www:/var/www/html/
    networks:
      - testnet
  db:
    image: mariadb:${MARIADB_VER}
    ports:
      - ${SQL_PORT}:3306
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASS}
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - testnet

volumes:
  db-data:

networks:
  testnet:
#+end_src

** Initialize database
*** Binary

You might already have corresponding database set up on a server. However if you want to test or modify anything on your local machine, this binary will automatically set up a database.

#+begin_src R :shebang "#!/usr/bin/env Rscript" :tangle-mode (identity #o755) :tangle ConfigDB

prompt1 <- "Are you running local test or uploading your platform to a server? (local/server) "
prompt2 <- "The name of target questionnaire you would like to use, extension required: "

cat(prompt1)
position <- readLines("stdin", n = 1)

cat (prompt2)
quest_name <- readLines("stdin", n = 1)

tryCatch (source ("R/make_scale.R"),
          error = browser())

cat ("Questionnaire has parsed and saved to `www` \n")

qlen <- nrow (dat)
cat ("Reading evnironment configuration... \n")

readRenviron(".env")

env_port <- Sys.getenv('SQL_PORT')
env_password <- Sys.getenv('DB_PASS')
env_usr <- Sys.getenv('USR_NAME')
env_quest <- quest_name

cat ("Arguments accepted, inatialising ...... \n")

if (position == "local") {
  env_dbname <- Sys.getenv('IMG_NAME')
  sql_dbname <- tools::file_path_sans_ext (quest_name)
  env_server <- "127.0.0.1"
  source ("R/init_db.R")
} else if (position == "server") {
  env_server <- Sys.getenv('SERVER_NAME')
  env_dbname <- Sys.getenv('SERVER_DB_NAME')
} else {
  stop ('arguments must be either "local" or "server"')
}

source ("R/init_table.R")
source ("R/init_trial.R")
source ("R/insertProc.R")
source ("R/db_conf.R")

cat("Initialization done")

#+end_src

*** R Scale generator

#+begin_src R :tangle ./R/make_scale.R
if (interactive()) {
  dat <- tibble::as_tibble (read.csv (
    '../scalepool/fullScale.csv',
    header = TRUE,
    na.strings = ""
  ))
} else {
  dat <- tibble::as_tibble (read.csv (paste0 ("./scalepool/", quest_name),
                               header = TRUE))
}

# split out questionnaire part
quest <- dat[, c("question", "q_choices", "q_required")]
colnames(quest)[colnames(quest) == "question"] <- "prompt"
colnames(quest)[colnames(quest) == "q_choices"] <- "choices"

if (!all(quest$q_required %in% c('y', 'n'))) {
  stop ("Column q_required not properly defined.")
}

if (!is.na(quest$choices[1])) {
  if (sum (is.na(quest$choices)) == 0) {
    quest_js <- quest |>
      dplyr::mutate (choices = purrr::map(quest$choices,
                                   \(.x) unlist (strsplit(.x, split = "/"))))
  } else if (sum (is.na(quest$choices)) == length (quest$choices) - 1) {
    quest_js <- quest |> 
      dplyr::mutate (choices = strsplit(quest$choices[1], split = "/"))
  } else {
    stop ('Column "q_hoices" not properly defined.')
  }
}

scaleJSON <- jsonlite::toJSON(quest_js, pretty = TRUE)

# split out demographic part
demo <- dat[, c("demo_var", "d_question", "d_choices", "d_required")] |> 
  dplyr::filter(demo_var != "NA")
colnames(demo)[colnames(demo) == "d_question"] <- "prompt"
colnames(demo)[colnames(demo) == "d_choices"] <- "choices"

demo_strvar <- demo |> 
  dplyr::filter (is.na(demo$choices)) |> 
  dplyr::mutate (choices = list (NA))

demo_catvar <- demo |> 
  dplyr::filter (!is.na(choices)) |> 
  dplyr::mutate (choices = purrr::map(choices,
                                       \(.x) unlist (strsplit(.x, split = "/"))))
demo_js <- dplyr::bind_rows(demo_strvar, demo_catvar)
demoJSON <- jsonlite::toJSON(demo_js, pretty = TRUE)


# write(scaleJSON, "./server/www/scale.json")
write(demoJSON, "./server/www/demo.json")
#+end_src

#+RESULTS:

*** Database

If you are testing on your local machine you need to manually set up the database.
#+begin_src R :tangle R/init_db.R :mkdirp yes

con <- DBI::dbConnect(
              RMariaDB::MariaDB(),
              host = env_server,
              port = env_port,
              user = env_usr,
              password = env_password)

stmt_db <- paste ('CREATE DATABASE', sql_dbname)

rs <- DBI::dbSendStatement(con, stmt_db)
DBI::dbClearResult (rs)
DBI::dbDisconnect(con)

cat ("database generated successfully \n")
#+end_src

*** Tables for storing data and recording id-order pairs

**** Create table for response data and send it to mysql.
#+begin_src R :tangle R/init_table.R :mkdirp yes
con_t <- DBI::dbConnect(
                RMariaDB::MariaDB(),
                host = env_server,
                port = env_port,
                user = env_usr,
                password = env_password,
                dbname = sql_dbname)

query <- "CREATE OR REPLACE TABLE response (
      p_id VARCHAR(999), 
      rt VARCHAR(999), 
      response VARCHAR(999), 
      Q_num VARCHAR(999), 
      trial_type VARCHAR(999), 
      trial_index VARCHAR(999), 
      order_index VARCHAR(999),
      time_elapsed VARCHAR(999), 
      internal_node_id VARCHAR(999)
      )"

rs <- DBI::dbSendQuery(con_t, query)
DBI::dbClearResult (rs)

cat ("response table generated successfully \n")
#+end_src

**** Create table for recording presentation order in R.

#+begin_src R :results silent :tangle R/generate_order.R
cat ("reading generate_order.R")
options (tidyverse.quiet = TRUE)
library (tidyverse)
set.seed (666) ## since it would be sourced by other scripts it should be reproducible.

## Method to generate a Latin-Square

latin_template <- function(n){

  lat_sq <- array (rep (seq_len (n), each = n), c (n, n))
  lat_sq <- apply (lat_sq - 1, 2, function (x) (x + 0:(n-1)) 
                   %% n) + 1

  return(lat_sq)
}

## Generate a table including all the presentation order we want, and make it suitable for JavaScript.
p_order_table <- function (qlen, rd.size = qlen) {
  if (isTRUE (rd.size >= factorial(qlen))) {
    stop ("number of expected randomzied order exceeded the maximum possible arrangments")
  } else {
    fx <- as_tibble (t ((1 : qlen)))
    ls <- as_tibble (latin_template (qlen))
    rd <- as_tibble (t (replicate (rd.size, sample (1: qlen, qlen, FALSE), TRUE)))

    ls_label <- paste0 (rep ("ls", length (ls)), 1:length (ls))
    rd_label <- paste0 (rep ("rd", rd.size), 1: rd.size)
    order_label <- c ("fx", ls_label, rd_label)
    position_label <- paste0 ("p", 1: qlen)

    dat <- (bind_rows (fx, ls) %>% bind_rows (rd) - 1)

    order_table <- tibble (order_label = order_label) %>% bind_cols (dat)
    colnames (order_table) [2: (qlen + 1)] <- position_label
    return (order_table)
  }
}

o.record <- p_order_table (qlen)

f.record <- tibble (
  order_label = o.record$order_label,
  n = rep (0)
)

match.record <- tibble (p_id = "0",
                        order_label = "0")
match.record <- match.record[-1, ]

#+end_src

**** Send tables to mysql using Terminal (or Common Prompt in Windows)

#+begin_src R :tangle R/init_trial.R
source ("R/generate_order.R")

DBI::dbWriteTable (con_t, "order_list", o.record, overwrite = TRUE)
DBI::dbWriteTable (con_t, "frequency_counter", f.record, overwrite = TRUE)
DBI::dbWriteTable (con_t, "order_match", match.record, overwrite = TRUE)

query <- paste ("ALTER TABLE", "order_match", "MODIFY order_label VARCHAR(999)", sep = " ")

rs <- DBI::dbSendStatement (con_t, query)
DBI::dbClearResult (rs)

query <- paste ("ALTER TABLE", "order_match", "MODIFY p_id VARCHAR(999)", sep = " ")

rs <- DBI::dbSendStatement (con_t, query)
DBI::dbClearResult (rs)


query <- paste ("CREATE OR REPLACE TABLE", "demo", "(
    p_id VARCHAR(999),
    age VARCHAR (999), 
    gender VARCHAR(999) 
    )")


## piece for dynamically sending demo var name.
## query <- paste0("CREATE OR REPLACE TABLE demo (",
##                 paste0(sprintf("%s VARCHAR(999)", demo_js$demo_var), 
##                        collapse = ","),
##                 ")")

rs <- DBI::dbSendStatement (con_t, query)
DBI::dbClearResult (rs)

#+end_src

*** Insert and store procedure (to handle with accepted data) in MySQL

#+begin_src R :tangle R/insertProc.R

query <- "CREATE OR REPLACE PROCEDURE insertLikertResp(IN json VARCHAR(9999))
    INSERT INTO response (p_id, rt, response, Q_num, trial_type, trial_index, order_index, time_elapsed, internal_node_id)
    VALUES(
      JSON_EXTRACT(json, '$.p_id'),
      JSON_EXTRACT(json, '$.rt'),
      JSON_EXTRACT(json, '$.response'),
      JSON_EXTRACT(json, '$.Q_num'),
      JSON_EXTRACT(json, '$.trial_type'),
      JSON_EXTRACT(json, '$.trial_index'),
      JSON_EXTRACT(json, '$.order_index'),
      JSON_EXTRACT(json, '$.time_elapsed'),
      JSON_EXTRACT(json, '$.internal_node_id')
   )"

rs <- DBI::dbSendStatement (con_t, query)
DBI::dbClearResult (rs)

DBI::dbDisconnect(con_t)

#+end_src

** Web
*** Back end

**** Mariadb config

#+begin_src R :results silent :tangle R/db_conf.R
template <- "[database]\ndriver = mysql\nhost = %s\nport = %s\ndbname = %s\nusername = %s\npassword = %s"
conf <- sprintf(template, "db", env_port, sql_dbname, env_usr, env_password)

writeLines(conf, 'server/www/private/conf.ini')
#+end_src

**** PHP connection class
#+begin_src php :tangle server/www/private/dbConnect.php :mkdirp yes
<?php
class dbConnect {
    private $pdo = null;

    public function getPDO(){
        return $this->pdo;
    }

    public function __construct(){
        try {
            $conf = parse_ini_file(__DIR__ . '/conf.ini', true);
            $dsn = sprintf('mysql:host=%s;port=3306;dbname=%s', $conf['database']['host'], $conf['database']['dbname']);
            $username = $conf['database']['username'];
            $password = $conf['database']['password'];

            $this->pdo = new PDO($dsn, $username, $password);
            // set the PDO error mode to exception
            $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        } catch(PDOException $e) {
            echo "<script>console.log('Connection failed: " . $e->getMessage() . "')</script>";
        }
    }
}
?>
#+end_src

**** htaccess
#+begin_src text :tangle server/www/private/.htaccess
<Location />
Order deny, allow
</Location>
#+end_src  

**** php scripts

Rely on fetch API mostly. The code here works but might not be efficient enough (I know...). Please help improving if you are willing to.

***** match_order.php

change =where n<1= in =$query= to set how many times each presentation order is assigned you want.
#+begin_src php :tangle server/www/match_order.php
<?php
require_once(__DIR__ . '/private/dbConnect.php');
$dbCon = new dbConnect();
$pdo = $dbCon->getPDO();

$json_string = json_decode(file_get_contents('php://input'), true);

$query = "SELECT * FROM order_list WHERE order_label IN
                          (SELECT order_label FROM frequency_counter WHERE
                             (CASE
                                WHEN (select (select n from frequency_counter where order_label = 'fx') < 50)
                                  THEN order_label = 'fx' OR (order_label != 'fx' AND n < 2)
                                ELSE order_label != 'fx' AND n < 2
                              END)
                           )
                        ORDER BY RAND() LIMIT 1";

try{
    $sth = $pdo->query($query);

    $result = $sth->fetchAll(PDO::FETCH_ASSOC);

    header('Content-Type: application/json; charset=utf-8');
    echo json_encode($result);

} catch (PDOException $e) {
    http_response_code (500);
    echo $e-> getMessage ();
};

?>
#+end_src

***** postMatch.php
This is VERY important since it records which participant received which presentation order. The subsequent assignment of orders will rely on this record (which is also my research goal).

#+begin_src php :tangle server/www/postMatch.php
<?php
require_once(__DIR__ . '/private/dbConnect.php');
$dbCon = new dbConnect();
$pdo = $dbCon->getPDO();
       
$json_string = json_decode(file_get_contents('php://input'), true);
       
try {    
    $data = array(
        ':p_id' => $json_string['p_id'], 
        ':order_label' => $json_string['order_label']
    );
    $test = $json_string['order_label'];
    

    // -- new here
    $email = array(
        ':p_id' => $json_string['p_id'], 
        ':email' => $json_string['email']
    );
    // -- new ends
       
    // change table names in the code below when use questionnaires with different length.
       
    $querya = "INSERT INTO order_match (p_id, order_label) VALUES (:p_id, :order_label)";
    $stmt = $pdo->prepare($querya);
    $stmt->execute($data);
       
    $queryb = "UPDATE frequency_counter SET n = n + 1 WHERE order_label = ?";
    $stmt = $pdo->prepare($queryb);
    $stmt->execute([$test]);
 
    $queryc = "INSERT INTO email (p_id, email) VALUES (:p_id, :email)";
    $stmt = $pdo->prepare($queryc);
    $stmt->execute($email);

    echo 'success';
       
} catch(PDOException $e) {
    http_response_code(500);
    echo $e -> getMessage();
};
?>
#+end_src

***** postData.php
#+begin_src php :tangle server/www/postData.php
<?php
require_once(__DIR__ . '/private/dbConnect.php');
$dbCon = new dbConnect();
$pdo = $dbCon->getPDO();

$json_string = json_decode(file_get_contents('php://input'), true);
       
try{

    $sql_proc = 'CALL ' . $json_string['proc_method'] . '(?)';

    $sth = $pdo->prepare($sql_proc);

    foreach ($json_string['json_trials'] as $x) {
        $sth->bindValue(1, json_encode($x), PDO::PARAM_STR);
        $sth->execute();
    };

    echo 'success';

}catch(PDOException $e){
    http_response_code(500);
    echo $e -> getMessage();
};
#+end_src

***** postDemo.php

#+begin_src php :tangle :tangle server/www/postDemo.php
<?php
require_once(__DIR__ . '/private/dbConnect.php');
$dbCon = new dbConnect();
$pdo = $dbCon->getPDO();
  
$pdo = $dbCon->getPDO();

$json_string = json_decode(file_get_contents('php://input'), true);

try {    
    $data = array(
        ':p_id' => $json_string['p_id'], 
        ':age' => $json_string['age'],
        ':gender' => $json_string['gender']
    );

    $query = "INSERT INTO demo (p_id, age, gender) VALUES (:p_id, :age, :gender)";
    $stmt = $pdo->prepare($query);
    $stmt->execute($data);

    echo 'demo post success';

} catch(PDOException $e) {
    http_response_code(500);
    echo $e -> getMessage();
};

?>
#+end_src

*** Front end
**** index.php
#+begin_src html :tangle server/www/index.php
<!DOCTYPE html>
<html>
  <head>
    <title> Your Survey </title>
    <script src="https://unpkg.com/jspsych@7.0.0"></script>
    <script src="https://unpkg.com/@jspsych/plugin-html-button-response@1.0.0"></script>
    <script src="https://unpkg.com/@jspsych/plugin-survey-likert@1.0.0"></script>
    <script src="https://unpkg.com/@jspsych/plugin-survey-text@1.0.0"></script>
    <style>
      .jspsych-btn {
      margin-bottom: 10px;
      }
    </style>
    <link
      rel="stylesheet"
      href="https://unpkg.com/jspsych@7.0.0/css/jspsych.css"
      />
    <link rel="shortcut icon" href="#"/>  <!-- remove it in production -->
  </head>
  <body></body>
  <!-- use module.js to connect js scripts. -->
  <script type= "module" src= "./runSurvey.js"> </script>
</html>

#+end_src

**** Generate jsPsych format questions

the execution of this piece generates a .js file including all questions within your .csv file, following `jsPsych`'s manner.
A short questionnaire with 3 items just for testing.
In formal survey you can add parameter =required: TRUE= right after =labels: likert= to create must-answer questions.
#+begin_src js :tangle server/www/jsscalegen.js

const getScale = async(uri) => {
    const output = await fetch (uri)
          .then (response => response.json())
    return output
}

let questionArray = await getScale('./scale.json')

console.log ('parse done');

var trials = [];
let i;
let k = questionArray.length;

function makeJsQuestion (questionArray, k) {
    for (i = 0; i < k; i++) {
        trials[i]  /*property name or key of choice*/
            = {
                type: jsPsychSurveyLikert,
                questions: [{
                    prompt: questionArray[i]['prompt'],
                    labels: questionArray[i]['choices']
                }],
                data: { Q_num: `0`+ (i+1)}
            };
        if (questionArray[i]['q_required'] == 'y') {
            trials[i].questions[0].required = true;
        } else {
            trials[i].questions[0].required = false;
        }
    }
}

makeJsQuestion (questionArray, k);

let demoArray = await getScale('./demo.json');

var demos = [];
let l;
let m = demoArray.length;

function makeJsDemo (demoArray, m) {
    for (l = 0; l < m; l++) {
        demos[l]  /*property name or key of choice*/
            = {
                questions: [{
                    prompt: demoArray[l]['prompt']
                }],
                data: { Q_num: demoArray[l]['demo_var']}
            };
        if (demoArray[l]['choices'] == null) {
            demos[l].type = jsPsychSurveyText;
        } else {
            demos[l].type = jsPsychSurveyLikert;
        };
        if (demoArray[l]['d_required'] == 'y') {
            demos[l].questions[0].required = true;
        } else {
            demos[l].questions[0].required = false;
        }
    }
}

makeJsDemo (demoArray, m);
console.log (demos);

export { trials };
#+end_src

**** welcomepage.js

#+begin_src js :tangle server/www/welcome.js

// var instru = `how you feel like you are a...`;
var likert = ["Strongly Disagree", "Disagree", "Neutral", "Agree", "Strongly Agree"];
var trials = [];

var start = {
    type: jsPsychHtmlButtonResponse,
    stimulus: '<p>Welcome to this behaviour survey, please press "start" to continue</p>',
    choices: [`Start`],
    data: { Q_num: `start` }
};

var blank = {
    type: jsPsychHtmlButtonResponse,
    stimulus: 'Press "Start" again to begin the survey',
    choices: [`Start`],
    data: { Q_num: 0 }
};

var submit_data = {
    type: jsPsychHtmlButtonResponse,
    stimulus: `that's the end of this survey, please clike 'submit' to submit your answers. Thanks for your participation.`,
    choices: ['submit'],
    data: { Q_num: `drop` }
};

export { start, blank, submit_data };
#+end_src

**** runSurvey.js

This piece has loaded all prepared questions, and is the main script `index.php` will call.
Since I used =async= funtion to assign presist presentation orders, the whole survey and related customized functions are needed to be wrapped into the resolve callback function.
#+begin_src js :tangle server/www/runSurvey.js
// --------- Setting up questionnaire. -------------

import { start, blank, submit_data } from './welcome.js';
import { trials } from './jsscalegen.js';

// ------- Functions to set up database connection ----------

const getData = async (data, uri) => {
    const settings_get = {
        method: 'POST',
        headers: {
            Accept: 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    };
    try {
        const fetchOrder = await fetch(uri, settings_get);
        const data = await fetchOrder.json();
        return data;
    } catch (e) {
        console.log(e);
    }
};

const getOrder = async () => {
    let data = await getData({}, 'match_order.php');
    return data;
};

// --------- Initializing jsPsych and posting response to database ----------

const postData = async (data, uri) => {
    const settings_post = {
	      method: 'POST',
	      headers: {
	          Accept: 'application/json',
	          'Content-Type': 'application/json'
	      },
	      body: JSON.stringify(data)
    };
    try {
	      const fetchResponse = await fetch(uri, settings_post);
	      const data = await fetchResponse.json();
	      console.log (data);
	      return data;
    } catch (e) {
	      console.log(e);
    }
};

// main function to receive presentation order and run the survey

let runSurvey = (data) => {

    if (data.length == 0) {
	      document.write ('all presentation orders are fully assigned, please run "Rscript reset_counter.R" in terminal to run this survey again');
	      throw 'all presentation orders are fully assigned, please run "Rscript reset_counter.R" in terminal to run this survey again';
    } else {
        var order_label = Object.values (data[0]);
        let order = order_label.slice (1, order_label.length).map (x => x + 1);
        if (order.length < 10) {
	          var order_str = order.map (i => "0" + i);
            console.log (order_str);
        } else {
            var order_str = [];
	          for (let j = 0; j <= order.length - 1; j++) {
	              let  element = order[j];
                if (element.length == 1) {
                    temp = "0" + element;
                    order_str.push (temp);
                } else {
                    order_str.push (order[j]);
                }
	          }
        };
    };

    // use async function to get presentation order from mysql

    var jsPsych = initJsPsych({
        on_finish: function () {
	          var p_id = jsPsych.randomization.randomID(4);
	          jsPsych.data.addProperties({order_index: method,
				                                p_id: p_id});
	          var match = {
	              p_id: p_id,
	              order_label: method
	          };
	          console.log (match);
	          let json = jsPsych.data.get()
	              .filterCustom(trial => trial.trial_type == 'survey-likert')
	              .ignore('question_order');
	          let json_trials = json.trials.map(x => {
	              let question = Object.keys(x.response)[0];
	              let response = x.response[question];
	              return ({
		                p_id: x.p_id,
		                rt: x.rt,
		                response: x.response,
		                Q_num: x.Q_num,
		                trial_type: x.trial_type,
		                trial_index: x.trial_index,
		                order_index: x.order_index,
		                time_elapsed: x.time_elapsed,
		                internal_node_id: x.internal_node_id
	              })
	          });
	          document.write (json_trials[0]);
	          console.log (json_trials[0]);
	          let trial_data = {
	              json_trials: json_trials,
	              proc_method: 'insertLikertResp'
	          };
	          postData (match, 'postMatch.php');
	          postData (trial_data, 'postData.php');
	          console.log(JSON.stringify(trial_data));
        }
    });

    // ----------- Reorganize questions based on the given order. -------------
    var new_order = [];
    var id = 0;

    for (let v = 0; v < order_str.length; v++) {
	      while (trials[id].data.Q_num != order_str[v]) {
	          id++
	      };
	      new_order.push (trials[id]);
	      id = 0; // repeatly matching.
    };

    console.log (order_label);
    console.log (new_order);
    var method = order_label [0];
    var fin_order = {timeline: new_order};
    jsPsych.run([start, blank, fin_order, submit_data]);
};

var presOrder = getOrder();

presOrder.then(runSurvey, (err) => {
    console.log(error);
});
#+end_src

**** Reset the frequenct counter using R

After all presentation orders are fully assigned, you need to turn back to terminal (or command prompt on Windows) to reset the counter by execute a R script if you want to enlarge the sample

#+begin_src R :tangle R/reset_counter.R 
qname <- commandArgs (TRUE)

readRenviron(".env")

con <- DBI::dbConnect(
              RMariaDB::MariaDB(),
              host = '127.0.0.1',
              port = Sys.getenv('SQL_PORT'),
              user = 'root',
              password = Sys.getenv('DB_PASS'),
              dbname = qname
            )

query <- "update frequency_counter set n = 0"

rs <- DBI::dbSendStatement (con, query)
DBI::dbClearResult (rs)
DBI::dbDisconnect (con)
#+end_src

** Analysis

*** Checkresponse
Run the following code in terminal (or command prompt on Windows), type the length of the questionnaire to check the corresponding tables (e.g., if your questionnaire is 6-item long, type =Rscript R/check_response.R 6=). Actually the only table we need to focus is =que_rd_test_n= but it's sometimes useful to see the other record.
#+begin_src R :tangle R/check_response.R
prompt_position <- "Are you running local test or uploading your platform to a server? (local/server)"
prompt_conf <- "Do you want R to read .env file to get data or manually setting the config (only more than 1 survey are conducted)? (env/man)"

cat(prompt_position)
position <- readLines("stdin", n = 1)

readRenviron(".env")

if (position == "local") {
  env_server <- '127.0.0.1'
} else if (position == "server") {
  env_server <- Sys.getenv ('SERVER_NAME')
} else {
  stop ('arguments must be either "local" or "server"')
}

library(DBI)
library(tidyverse)

con_t <- DBI::dbConnect(
                RMariaDB::MariaDB(),
                host = env_server,
                port = Sys.getenv('SQL_PORT'),
                user = Sys.getenv('USR_NAME'),
                password = Sys.getenv('DB_PASS'),
                dbname = Sys.getenv('SERVER_DB_NAME'))

response <- tbl (con_t, "response") %>% collect()
frequency <- tbl (con_t, "frequency_counter") %>% collect ()
order <- tbl (con_t, "order_list") %>% collect ()
match <- tbl (con_t, "order_match") %>% collect ()

dbDisconnect(con_t)
head (response)
head (frequency)
head (order)
head (match)

#+end_src

* Citation

.cff files
#+begin_src text :tangle ./CITATION.cff
cff-version: 1.2.0
title: >-
  Detecting Item and Sequential Effects in
  Psychometric Surveys: A Demo Platform
message: >-
  If you use this software, please cite it using the
  metadata from this file.
type: software
authors:
  - given-names: Jinghui
    family-names: Liang
  - given-names: Alistair
    family-names: Beith
  - given-names: Dale
    family-names: Barr
version: 1.0.0
date-released: 2022-04-30
url: "https://github.com/Jinghui-Liang/rt_survey_demo.git"
#+end_src
