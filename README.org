* About

Reaction time (RT) for items in psychometric questionnaires reflect participants' immediate mental status during their response processes. Yet none of the popular data collection platforms allow collecting individual RT for each item. This demo provides an environment to collect such data based on various programming languages (R / JavaScript / PHP / HTML) that interactively work. It also contains randomized and pseudorandomized design strategies to organize the presentation order of a questionnaire in order to explore item effects and sequential effects in psychometric survey.

* Quick start

** Installation and dependencies

Before using this platform, you will need these dependencies in your local machine:

- Node.js
- Apache
- MariaDB (version 10.4)
- R (version 4.1 or above, with =tidyverse=, =DBI=, =jsonlite= packages installed)
- Docker
- PHP

To download this platform, put the lines below in terminal (or command prompt on Windows).
#+begin_src shell
git clone https://github.com/Jinghui-Liang/rt_survey_demo.git
#+end_src

** Using this survey with default settings

*** Environment file

This platform uses =.env= file to set up all connection configuration. This config allows you to test everything with your local machine. For Emacs user, use =C-u C-c C-v C-t= to tangle changes *ONLY* with this block. Or you can open =.env= with your preferred editor and change the config to the corresponding values, if you want to upload this platform to your server or make any changes. If you don't see it, inspect if you have set "showing hidden files".

#+begin_src text
HTTP_PORT=8080
SQL_PORT=3306
USR_NAME=root
SERVER_DB_NAME=test
DB_PASS=example
MARIADB_VER=10.4
COMPOSE_PROJECT=platform
#+end_src

*** Working examples

"Type something within a pure text file then everything works?", I can see painful faces for people who are not having programming experience. However, we are trying our best to make everything as simple as possible. To illustrate this, you can try using our working examples. These examples are all locally done. The only thing you need is to figure out how to open terminal/power prompt, and getting skilful in typing.

- Open terminal
- Change directory (=cd=) to the place where =rt_survey_demo= stays

#+begin_src shell
cd /path/to/rt_survey_demo
#+end_src

- Then, type

#+begin_src shell
docker-compose up -d --build

# after you notice you can type again

./ConfigDB

Are you running local test or uploading your platform to a server? (local/server) local
The name of target questionnaire you would like to use, extension required: testScale.csv
#+end_src

- When you see "Initialization done", go to your browser, type =127.0.0.1:8080=, you can see a well organized questionnaire is done.

I hope this can make a sense that it's not that hard to use our platform. However, for detailed usages, there are still something you should know to get better online reaction-time-record survey with our system.

*** Generate ready-to-use files

For users who have prepared an online database and know its configuration, the following steps allow compiling files including converted questionnaire (in =JSON= format), corresponding database connection configuration, and presentation order tables.

1. Edit =.env= file, make sure everything matches your production settings.
2. Prepare your questionnaire file in =.csv= format, with the first column being your questions. Place each row with one question only.
3. Make a copy of your questionnaire file and move it to =./scalepool= directory.
4. Back to the root directory (=rt_survey_demo= by default, but you can surely rename it), open the binary =ConfigDB=. Following the instruction, put =server= as your first argument to let generator know it should follow slightly settings based on your demand. Hit the return, then type the name of your =.csv= questionnaire **WITH EXTENSION**.
5. When you see =Initialization done= display on your terminal, that you want to access =./server/www=, and =www= folder is the wrapper you would like to submit to server.

#+begin_src shell
./ConfigDB

Are you running local test or uploading your platform to a server? (local/server) server
The name of target questionnaire you would like to use, extension required: your_questionnaire_name.csv
#+end_src

*** Test your questionnaire

It's common that you would like to test everything before launching your survey. Regarding this case, we used a Docker container to build up a virtual development environment. The processes are similar as above, but you have more flexibility to customize the development environment to suit your case.

**** General Steps

1. You don't have to change anything from =.env= unless you want to (see next session).
2. Put =docker-compose up -d --build= to command line to activate the Docker container we papered for users.
3. Prepare your questionnaire file in =.csv= format, with the first column being your questions. Place each row with one question only.
4. Make a copy of your questionnaire file and move it to =./scalepool= directory.
5. Back to the root directory (=rt_survey_demo= by default, but you can surely rename it), open the binary =ConfigDB=. Following the instruction, put =local= as your first argument to let =ConfigDB= know you are doing test. Press return, then type the name of your =.csv= questionnaire **WITH EXTENSION**. You can ignore "incomplete final line found" error which may appear during the execution.
6. When you see =Initialization done= display on your terminal, open your preferred browser and go to =localhost:8080= (MacOS/Linux) or =127.0.0.1:8080= (All operating system) to check if questionnaire are appropriate loaded.
7. If you would like to manage your database:
   - **outside** the docker image: go to the terminal and type: =mysql -h 127.0.0.1 -u root -P ${SQL_PORT} -p= (where ${SQL_PORT} is 3306 by default), or
   - =docker exec -it localMariaDB sh= to call the shell **inside docker**, then =mysql -h 127.0.0.1 -u root -P 3306 -p= to access MariaDB;
   - hit enter and type your password (you can see it from =.env=) or use preferred database management IDEs,
   - you will find a database with the same name as your questionnaire without extension.
8. When finishing testing, don't forget putting =docker-compose down= on your terminal to save some memory.

**** Change the default

- Once =docker-compose up -d --build= is executed, two containers will be created based on =.env= settings. First, the =php2= container is used to connect to virtual MariaDB environment. While the =localMariaDB= is the virtual database container where your data (responses) will be stored into. To modify MariaDB container name, change =IMG_NAME= in =.env=
- This container network (i.e., connection between =php2= and MariaDB) uses default port 3306. However, you can customize the "outside" port to your prefer ones to suit your case. For example, changing =SQL_PORT=3308= in =.env= allows you to connect to the database inside docker with terminal command =mysql -h 127.0.0.1 -u root -P 3308 -p=. But if you are assessing the database inside docker, the port will always be 3306. You can check which port is used by command =docker ps=.
- When conducting local test with docker, variable =SERVER_DB_NAME= will be ignored because the MariaDB database name will always be your questionnaire name. While generating submmitable =www= folder (say, typing =server= as =ConfigDB= argument), =IMG_NAME= will be ignored since =ConfigDB= no longer creates docker containers.
- If you want to test different questionnaires with the same docker/connection configuration, please refer to [[What if I want to use another questionnaire?]] session. However, if you would like to change the external port, username or other connection settings, make sure do =docker-compose down= first, then modify and save =.env=, then execute =docker-compose up -d --build= again to verify your changes.

*** What should be seen from the browser

Regardless what kind of settings you've done, you should see a welcome page and a "start again" page displaying first, then your questionnaire follows. The welcome page shows as a greeting (easy enough to understand). However, the "start again" page is not a duplicate one -- we actually start measuring participant's reaction time at this point and use it as our "baseline", because the only thing participants will do is reading and clicking -- no choosing process are needed for them. After all your questions are displayed, participants will see the ending page with a "submit" button. Their responses and all other data will not be saved to database unless they click that button.

Text of welcome page and ending pages are changeable. Check out the =server/www/welcome.js= file and edit the context, and you're good to go.

*** What if I want to use another questionnaire?

Just prepare another =.csv= file and move that to =./scalepool= as you did. Then run the =ConfigDB= with corresponding argument. Done.

- For launching your survey online, notice that your previous =www= folder will be covered. Make sure you've had a copy of that, or you are okay with the cover.
- For local test, =ConfigDB= will generate a new database based on your questinnaire name.

*** Presentation orders

This platform does the following to deploy different kinds of presentation order:

- First, our built-in R scripts generate a table containing =fixed=, =latin-square=, and =complete randomization= orders, where =fixed= order is exactly the same as your question arranged in your =.csv= file; =latin-square= is an n * n matrix (n is the length of the questionnaire). System treats each row as a presentation order. Take a 3-item questionnaire as an example, the generated latin-square will be like:

| 1 | 2 | 3 |
| 3 | 1 | 2 |
| 2 | 3 | 1 |

So participants will possibly receive the questionnaire with questions displaying following one of orders =2nd, 3rd, 1st=, =1st, 2nd, 3rd=, or =3rd, 1st, 2nd= compared to their original arrangement (counterbalanced design).

=complete randomization= will generate an n * n fully randomized presentation order matrix (fully randomized design). System treats each row of this matrix as a presentation order. Again, n means the length of your questionnaire.

- The table including all these orders will be sent to specific database as user-defined, being saved in =MariaDB= table called "order_list".
- Every time the survey starts, system randomly select a row as presentation order and organize all questions based on this.

- To maintain balanced design, once a specific presentation order has reached a number of assignment frequency, system will no longer use that unless the frequency is reset (described later). By default, the maximal assignment frequency of =fixed= order is 100, 2 for each row of =latin-square=, and =2= for each row of =complete randomization=. With these settings, it's hopefully we can have 300 participants if we are using a 50-item long questionnaire. 

- However, we found that in production, it's common that orders can be assigned more than our expectation. That's because our built-in counter won't refresh itself until new data has been submitted.

- Users has full control about how they want the presentation orders are like. To modify the presentation order, please edit =R/generate_order.R= (see below for more details). At this point the script might look a bit complicated, but we will work on that to make it easier to be understood, and we will also add more quasirandomization strategies to organize the presentation order of questionnaires.

*** Downloading your data

In this part you are mostly possible to be in a Rstudio or Emacs environment since you might be ready to analysing your data with them. If you want to get the data you collected, open =R/check_response.R= with Rstudio or Emacs and run all lines in it. Table =response= is the survey data, =frequency= records how many times each presentation orders were assigned (to help you make sure if your study is "balanced" enough), =order= records all presentation orders used in your survey. Finally, =match= records which participant (identified by an anonymous reference code) received which presentation order.

*** Extend your survey (Under Development)

The assignment of presentation order is controlled by =server/www/matchOrder.php=. You can keep your survey running without any restriction by editing MySQL queries in it. However, to make sure the balanced design, we set up some rules to avoid a specific order being assigned for too many times (described below). These rules and requirements are calculated according to table =frequency_counter= in MySQL database. When requirement are met, anyone who log in to the survey URL will see a message:

'This survey is closed, thanks for your interest to participate.' 

displayed on the web page. If you want to recruit more participants, you can either modify =matchOrder.php= or run the command line below.

#+begin_src shell
Rscript R/reset_counter.R
#+end_src

It will return each value in =frequency_counter= to zero and start the survey again. All collected data won't be affected.

*** All configuration and future upgrades

For users who want to inspect the underlying codes, they can either open all the source code and do the hard code. Also, the whole management is done via an [[./all_config.org][all_config.org]] file. Emacs users can tangle (=C-c C-v C-t= for all source blocks, =C-u C-c C-v C-t= for a specific block where your courser stays) changes.

For one who's wanting to explore the basis of this platform we believe you can safely close this page now. However, we actually developed couple practical functions for researchers to have more possibility to combine quasirandomization, reaction time, and response together, therefore having more detailed understanding about immediate psychological status changes. So next time the following pieces will be upgraded and included into the "Quick Start" part:

- Code descriptions in [[./all_config.org][all_config.org]].
- Enlarging your sample.

