* About

This is a free, open-source platform for generating online questionnaire surveys. It has a built-in shiny app, =inject-order= for arranging item sequence, including ten methods which have potential to improve reliability/validity in psychological assessments. Also, this platform can collect participants' reaction time (RT) for each item.

* Quick start

** Installation and dependencies

This platform is containerized with [[https://www.docker.com/][Docker]] so users should have it installed on local machines. To access default functionalities, no external dependencies are needed. For advanced user who want to customize this platform, refer to [[*Advanced users]] for more information. To download this platform, put the lines below in terminal (or command prompt on Windows).

#+begin_src shell
git clone https://github.com/Jinghui-Liang/rt_survey_demo.git
#+end_src

** Using this survey with default settings

A common workflow for this platform is, users install this platform and prepare their questionnaires. Then arrange item sequences with =inject-order=. Next, activate this platform and deploy database, tables, and launch the questionnaire. After the survey, users download the stored datasets from online database. Below is a step-by-step tutorial.

*** Environment file

This platform uses =.env= file for configurations. It is a hidden file on the root directory of this platform. Default settings do not need to modify this file.

#+begin_src text
HTTP_PORT=8080
SQL_PORT=3307
USR_NAME=root
SERVER_DB_NAME=test
DB_PASS=example
MARIADB_VER=10.4
COMPOSE_PROJECT=platform
#+end_src

*** Prepare: questionnaire and container

The first thing to do is to prepare a questionnaire file. This platform only accept comma separate variable ("csv") files for now. A (simplified) template of acceptable file should look like this:

#+begin_src R :export results :wrap org :colnames yes
  dat <- suppressMessages(readr::read_csv("./scalepool/fullscale.csv"))
  head(dat, 5)
#+end_src

#+RESULTS:
#+begin_org
| question                          | choices                     | required | label  | demographic |
|-----------------------------------+-----------------------------+----------+--------+-------------|
| What is your age?                 |                             | n        | age    | y           |
| What is your gender               | male/female                 | n        | gender | y           |
| I am the life of the party.       | Inaccurate/Neutral/Accurate | y        | E      |             |
| I feel little concern for others. |                             | n        | A      |             |
| I am always prepared.             |                             |          | C      |             |
#+end_org

Some requirements should be followed when organizing this questionnaire:

- For column "question", each row only contains one question;
- For column "choices", separate choices with slashes or leave it blank;
  - For demographic items, blank cell in this column will allow the item to accept textural input;
  - For scale items, blank cell in this column means corresponding items have the same choices as the first item with specified choices in this column.
- For column "required", letter "n" means an item can be skipped, while letter "y" or a blank cell make an item unskippable.
- For column "label", type the variable names for demographic items, and factor labels for scale items (i.e., which subscale an item belongs to).
- Column "demographic" tells if an item is a demographic item or scale item. Only recognizing "y" as symbol of demographic items.

A full template can be found [[file:scalepool/fullscale.csv][here]].

This file should be stored on =surveypool= directory. Then, go to =inject-order= shiny app by executing two commands

#+begin_src shell
cd /path/to/rt_survey_demo
Rscript shiny::runApp("inject-order")
#+end_src

or by accessing =app.R= to activate.

Users will then be taken to the interface of =inject-order=, to arrange item sequences of this questionnaire, they should upload the csv file that is stored on "surveypool" directory. Successful submission will generate a preview on "data" panel. Then users should head to "order" panel to start organizing presentation orders and target sample sizes under each methods. Currently, this platform provides eleven methods to arrange presentation order, details of every method can be found [[file:inject-order/description.md][here]].

Once the arrangement is finished, users can go to "plan" anal to inspect selected methods and corresponding sample sizes. For "fixed" collections (e.g., fx, gff, cff), all participants will receive the same presentation order. But for the rest methods, participants will receive sequences that is independently randomized. Users should click the download button on the top to download the compressed archive, =df-order.zip= to get the plan files. Decompressing is not needed because scripts later on will do so automatically.

Next, we should start building the container. Change the working directory to where this platform is installed via the command line:

#+begin_src shell
cd /path/to/rt_survey_demo
#+end_src

then build up and activate the docker container by typing:

#+begin_src shell
  docker-compose up -d --build
#+end_src

Building this container will take couple minutes for the first time, depending on connection quality. When containers =survey_php= and =survey_db= are built, users can see prompts displayed on the terminal.

Next, take over the "virtual system" inside the container and execute the built-in binary =ConfigDB= by typing:

#+begin_src shell
  # after you notice you can type again
  docker exec -it -w /var survey_php sh
  ./ConfigDB
#+end_src

Successful execution generates a prompt, =Are you running local test or uploading your platform to a server? (local/server)=. Now we put =local= as the argument and hit return, then for the next prompt, =The name of target questionnaire you would like to use, extension required:=. We put the file name of the questionnaire just stored, =ipip20.csv= as the argument. Now =ConfigDB= will automatically configure the database and the survey. When you see "Initialization done", go to your browser, type =127.0.0.1:8080=, you can access the survey as a participant. At this point you would not know which presentation order you received.

You should see a welcome page, demographic items (if any), and a "start again" page displaying first, then scale item follows. The welcome page shows as a greeting (easy enough to understand). However, the "start again" page is not a duplicate one -- we actually start measuring participant's reaction time at this point and use it as our "baseline", because the only thing participants will do is reading and clicking -- no choosing process are needed for them. After all your questions are displayed, participants will see the ending page with a "submit" button. Their responses and all other data will not be saved to database unless they click that button.

*** Data

Only after a participant responds to all question (can skip items if specified) and click "submit" button at the end of this survey, their data will be stored in database. To download and inspect datasets, users can execute =download_rawdat.R= by command line:

#+begin_src shell
  Rscript R/download-rawdat.R
#+end_src

Three prompts will be displayed to ask which database the data is stored in, and whether full datasets should be downloaded. For the first prompt, put =local= as the argument, For the second prompt, simply put the questionnaire name as the argument (=ipip20= in this example). For the last prompt, argument =f= will download demographic dataset, response dataset, and participant-order pairs dataset (recording which participant received which order), while =r= only downloads response dataset.

Another way is, users can directly access =/R/download_rawdat.R= and change network connect environment inside, and download the data using =dplyr::tbl()= function.

*** Launch a survey

If users have a host server, they can change the =.env= file on the root directory of this platform in order to match connection environment, including online database name, username, http port, and password. Then, enter the container and execute =ConfigDB= again. This time, take =server= as the argument for the first prompt, while remain everything else unchanged. Downloading dataset from server follows the same procedure as [[*Data]] section, but make sure =.env= is properly configure to connect to the database in host server.

** Advanced users

*** Customize this platform

If users would like to extend/modify functionalities of this platform, the following dependencies should be installed locally:

- Node.js
- Apache
- MariaDB (version 10.4 or greater)
- R version 4.1 or greater, with the following packages:
  - =tidyverse=, =DBI=, =RMariaDB=, =RMariaDB=, =jsonlite=, =shiny=
- Docker
- PHP

Please refer to [[file:all_config.org][all_config.org]] to check all scripts.

*** Access databases outside the container

The default of this platform does not explore the database container. But if users would like to inspect it, use =mysql= command:

#+begin_src shell
mysql -h 127.0.0.1 -u root -P 3307 -p
#+end_src

default password can be found on =.env=. Notice that for higher version of MySQL, there might be a "SSL" error when trying to access MariaDB with unclear reason. But users can add =--skip_ssl= as an argument to skip authentication.

*** Use your own item arrangement algorithm

- If you would like to arrange item sequences by customize R functions, add them to =./inject-order/default.R=, and modify =ui= in =app.R=
- If you already have a order list and plan (like the two csv files inside the downloaded =df-order.zip=), compress them and replace the downloaded one, no need to use =inject-order= to customize.
